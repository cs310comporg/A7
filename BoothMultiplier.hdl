CHIP BoothMultiplier {

    IN   initQ[16], initM[16], reset;
    OUT  out[16], done;

    PARTS:
    // Implementation missing
	//M Register
	MRegister(in = Mval , out[0] = M0 , out[1] = M1 , out[2] = M2 , out[3] = M3 , out[4] = M4 , out[5] = M5 , out[6] = M6 , out[7] = M7 , out[8] = M8 , load = mRegLoad) ;
	Mux16(a = initM , b = false , out = Mval , sel = state0) ;
	
	//A Register
	ARegister(in = Aval , out[1..15] = a115 , out = answer , load = aRegLoad) ;
	Mux16(a = newA , b = false , out = Aval , sel = state0) ;
	
	//Q Register
	QRegister(in = Qval , out[1..15] = Q115 , out[0] = Q0 , out[15] = Q15 , load = qRegLoad) ;
	Mux16(a = newQ , b = false , out = Qval , sel = state0) ;

	//C Register
	CRegister(in = Cval , out = count , out[0] = count0 , out[1] = count1 , out[2] = count2 , out[3] = count3 , load = cRegLoad) ;
	Mux16(a = newCount , b = false , out = Cval , sel = state0) ;
	
	//Q_-1 bit
	Bit(in = qmin1Val , out = Qmin1 , load = qmin1Load) ;
	Mux(a = newQmin1 , b = false , out = qmin1Val , sel = state0) ;
	
	//Adder
	Add16CLA(a = adderIn1 , b = adderIn2 , cin = sub , cout = carryOut , finalCin = finalCin , out = addOutput , out[15] = addOutputSign) ;
	
	//Q value selector
	Mux16(a = initQ , b[0..14] = Q115 , b[15] = Q15 , sel = setQ , out = newQ) ;
	
	//C value selector
	Mux16(a[4..15] = false , a[3] = true , a[0..2] = false , b = addOutput , sel = setC , out = newCount) ;
	
	//Central State Comparison
	Not(in = Q0 , out = notQ0) ;
	Not(in = Qmin1 , out = notQmin1) ;
	And(a = Q0 , b = notQmin1 , out = subState) ;
	And(a = notQ0 , b = Qmin1 , out = addState) ;
	
	//Math States
	Mux16(a = count , b = answer , sel = countOrAdd , out = adderIn1) ;
	Mux16(a[0] = true , a[1..15] = false , b[15] = M7 , b[14] = M6 , b[13] = M5 , b[12] = M4 , b[11] = M3 , b[10] = M2 , b[9] = M1 , b[8] = M0 , sel = countOrAdd , out = adderIn2) ;
	
	Mux16(a = addOutput , b[15] = newASign , b[0..14] = a115  , sel = shiftOrAdd , out = newA) ;
	
	Xor(a = carryOut , b = finalCin , out = overflow) ;
	Not(in = addOutputSign , out = notAddOutputSign) ;
	Mux(a = addOutputSign , b = notAddOutputSign , sel = overflow , out = fixedSign) ;
	
	Bit(in = fixedSign , out = newASign , load = saveSign) ;
	
	Mux(a = false , b = Q0 , sel = setQmin1 , out = newQmin1) ;
	
	//Check count state
	Or16Way(a = count0 , b = count1 , c = count2 , d = count3 , out = temp) ;
	Or(a = state0 , b = temp , out = continue) ;
	Or(a = continue , b = reset , out = continueOrReset) ;
	
	Not(in = continue , out = done , out = doneInternal) ;
	
	//Control Unit Logic
	Bit(in = ns0 , out = sb0 , load = continueOrReset) ;
	Bit(in = ns1 , out = sb1 , load = continueOrReset) ;
	Bit(in = ns2 , out = sb2 , load = continueOrReset) ;
	
	Not(in = sb0 , out = notS0) ;
	Not(in = sb1 , out = notS1) ;
	Not(in = sb2 , out = notS2) ;
	
	And(a = notS0 , b = notS1 , out = not0not1) ;
	And(a = notS2 , b = not0not1 , out = state0) ;
	
	And(a = sb0 , b = notS1 , out = zeroNot1) ;
	And(a = zeroNot1 , b = notS2 , out = state1) ;
	
	And(a = notS0 , b = sb1 , out = not0and1) ;
	And(a = not0and1 , b = notS2 , out = state2) ;
	
	And(a = sb0 , b = sb1 , out = zeroAnd1) ;
	And(a = zeroAnd1 , b = notS2 , out = state3) ;
	
	And(a = not0not1 , b = sb2 , out = state4) ;
	
	And(a = zeroNot1 , b = sb2 , out = state5) ;
	
	And(a = not0and1 , b = sb2 , out = state6) ;
	
	And(a = zeroAnd1 , b = sb2 , out = state7) ;
	
	And(a = state6 , b = reset , out = gotoState0) ;
	Not(in = gotoState0 , out = dontGotoState0) ;
	And(a = state2 , b = addState , out = state2AndAdd) ;
	Xor(a = state2 , b = state2AndAdd , out = twoXorAdd) ;
	And(a = state6 , b = doneInternal , out = sixAndDone) ;
	Or16Way(a = state0 , b = twoXorAdd , c = state3 , d = state4 , e = sixAndDone , out = nst0) ;
	And(a = nst0 , b = dontGotoState0 , out = ns0) ;
	
	And(a = state2 , b = subState , out = twoAndSub) ;
	Or16Way(a = state1 , b = twoAndSub , c = state5 , d = state6 , out = nst1) ;
	And(a = nst1 , b = dontGotoState0 , out = ns1) ;
	
	Not(in = subState , out = notSub) ;
	And(a = state2 , b = notSub , out = twoAndNotSub) ;
	Or16Way(a = twoAndNotSub , b = sixAndDone , c = state5 , d = state4 , e = state3 , out = nst2) ;
	And(a = nst2 , b = dontGotoState0 , out = ns2) ;
	
	//Output
	Mux16(a = false , b = answer , sel = doneInternal , out = out) ;
	
	//Internal control unit
	Mux8Way16(a[0] = true , a[1] = true , a[2] = true , a[3] = true , a[4] = true , a[5..15] = false ,
			  b[0] = true , b[1] = false , b[2] = true , b[3] = true , b[4] = true , b[5] = false , b[6] = false , b[7] = false , b[8] = false , b[9] = false , b[10] = false , b[11..15] = false ,
			  c[0] = false , c[1] = false , c[2] = false , c[3] = false , c[4] = false , c[5] = false , c[6] = false , c[7] = false , c[8] = false , c[9] = false , c[10] = false , c[11..15] = false ,
			  d[0] = false , d[1] = true , d[2] = false , d[3] = false , d[4] = false , d[5] = true , d[6] = false , d[7] = false , d[8] = true , d[9] = false , d[10] = false , d[11] = true , d[12..15] = false , 
			  e[0] = false , e[1] = true , e[2] = false , e[3] = false , e[4] = false , e[5] = false , e[6] = false , e[7] = false , e[8] = true , e[9] = false , e[10] = false , e[11] = true , e[12..15] = false ,
			  f[0] = false , f[1] = true , f[2] = true , f[3] = true , f[4] = true , f[5] = true , f[6] = true , f[7] = true , f[8] = false , f[9] = true , f[10] = true , f[11..15] = false ,
			  g = false ,
			  h = false ,
			  sel[0] = sb0 , sel[1] = sb1 , sel[2] = sb2 , 
			  out[0] = mRegLoad , out[1] = aRegLoad , out[2] = qRegLoad , out[3] = cRegLoad , out[4] = qmin1Load , out[5] = sub , out[6] = setQ , out[7] = setC , out[8] = countOrAdd ,
			  out[9] = shiftOrAdd , out[10] = setQmin1 , out[11] = saveSign) ;
	
	
}
